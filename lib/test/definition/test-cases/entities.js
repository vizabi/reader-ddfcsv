"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = require("../../common");
const ddf_query_validator_1 = require("ddf-query-validator");
const map = require("lodash.map");
const flatMap = require("lodash.flatmap");
const isNil = require("lodash.isnil");
const flatten = require("lodash.flatten");
const ALL_OPERATORS = [null, '.', '.is--'];
const ALL_CONCEPTS = ['', ' ', ddf_query_validator_1.RESERVED_CONCEPT, ddf_query_validator_1.RESERVED_CONCEPT_TYPE, ddf_query_validator_1.RESERVED_DOMAIN, ddf_query_validator_1.RESERVED_DRILL_UP, 'company', 'english_speaking', 'company_scale', 'name', 'anno', 'lines_of_code', 'region', 'country', 'latitude', 'longitude', 'full_name_changed', 'project', 'domain', 'additional_column', 'meeting_style', 'popular_appeal', 'methodology'];
const ALL_ENTITY_SETS_AND_DOMAINS = ['company', 'english_speaking', 'company_scale', 'region', 'project'];
exports.initData = { path: common_1.BASE_PATH + common_1.WS_TESTING_PATH + '/master-HEAD' };
exports.testsDescriptors = ALL_ENTITY_SETS_AND_DOMAINS.reduce((acc, entitySetOrDomain) => {
    const BINARY_OPERATORS = [...flatMap(ALL_CONCEPTS, (parent) => map(ALL_CONCEPTS, (child) => [parent, child]))];
    const UNARY_OPERATORS = [...ALL_CONCEPTS];
    const description = `Autogenerated tests for ${entitySetOrDomain}`;
    acc[description] = flatten(ALL_OPERATORS.map((operator) => {
        const CONCEPTS_CLAUSE = isNil(operator) ? UNARY_OPERATORS : map([...BINARY_OPERATORS], (args) => args.join(operator));
        return CONCEPTS_CLAUSE.map((clause) => ({
            itTitle: `should be fine for ${clause}`,
            query: {
                from: 'entities',
                dataset: common_1.WS_TESTING_PATH,
                select: { key: [entitySetOrDomain] },
                where: {
                    [clause]: true
                }
            }
        }));
    }));
    return acc;
}, {});
//# sourceMappingURL=entities.js.map